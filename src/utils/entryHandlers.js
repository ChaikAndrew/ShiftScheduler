// import { DateTime } from "luxon";
// import { calculateWorkTime } from "./timeCalculations";
// import {
//   isValidFirstShiftTime,
//   isValidSecondShiftTime,
//   isValidThirdShiftTime,
// } from "./validateShiftTime";
// // import { recalculateDowntime } from "./recalculateDowntime";

// import {
//   saveEntryToDB,
//   updateEntryInDB,
//   deleteEntryFromDB,
//   getEntriesFromDB,
// } from "../utils/api/shiftApi";

// /**
//  * –û–±—Ä–æ–±–ª—è—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∑–º—ñ–Ω–∏.
//  *
//  * @param {Object} form - –û–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–ø–∏—Å.
//  * @param {string} currentShift - –ü–æ—Ç–æ—á–Ω–∞ –∑–º—ñ–Ω–∞ (first, second, third).
//  * @param {string} selectedDate - –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞.
//  * @param {string} selectedLeader - –û–±—Ä–∞–Ω–∏–π –ª—ñ–¥–µ—Ä.
//  * @param {string} selectedMachine - –û–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞.
//  * @param {string} selectedOperator - –û–±—Ä–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä.
//  * @param {Object} entries - –ü–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Å–∏.
//  * @param {Function} setEntries - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É entries.
//  * @param {Function} setEditingIndex - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
//  * @param {Function} setForm - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
//  * @param {number|null} editingIndex - –Ü–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.
//  * @returns {void}
//  */

// export async function handleSaveEntryToDB({
//   form,
//   currentShift,
//   selectedDate,
//   selectedLeader,
//   selectedMachine,
//   selectedOperator,
//   setForm,
//   editingIndex,
//   editingEntryId, // —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
//   token,
//   onSuccess,
// }) {
//   const startTime = `${selectedDate}T${form.startTime}`;
//   const endTime = `${selectedDate}T${form.endTime}`;

//   if (
//     (currentShift === "first" && !isValidFirstShiftTime(startTime, endTime)) ||
//     (currentShift === "second" &&
//       !isValidSecondShiftTime(startTime, endTime)) ||
//     (currentShift === "third" && !isValidThirdShiftTime(startTime, endTime))
//   ) {
//     console.error("‚õî Invalid time for shift!");
//     return;
//   }

//   const { workingTime, initialDowntime, shift } = calculateWorkTime(
//     startTime,
//     endTime
//   );

//   const entryData = {
//     shift,
//     machine: selectedMachine,
//     date: selectedDate,
//     displayDate: selectedDate,
//     startTime,
//     endTime,
//     workingTime,
//     downtime: initialDowntime,
//     initialDowntime,
//     leader: selectedLeader,
//     operator: selectedOperator,
//     task: form.task === "Zlecenie" ? form.customTaskName : form.task,
//     product: form.product,
//     color: form.color,
//     reason: form.reason,
//     quantity: parseInt(form.quantity, 10),
//   };

//   try {
//     if (editingIndex !== null && editingEntryId) {
//       const response = await updateEntryInDB(editingEntryId, entryData, token);
//       console.log("‚úÖ Updated entry:", response.data);
//     } else {
//       const response = await saveEntryToDB(entryData, token);
//       console.log("‚úÖ Added entry:", response.data);
//     }

//     setForm({
//       startTime: "",
//       endTime: "",
//       task: "",
//       customTaskName: "",
//       product: "",
//       color: "",
//       reason: "",
//       quantity: 0,
//     });

//     if (onSuccess) onSuccess();
//   } catch (err) {
//     console.error("‚ùå Error saving entry:", err.response?.data || err.message);
//   }
// }
import { DateTime } from "luxon";
import { calculateWorkTime } from "./timeCalculations";
import {
  isValidFirstShiftTime,
  isValidSecondShiftTime,
  isValidThirdShiftTime,
} from "./validateShiftTime";

import { saveEntryToDB, updateEntryInDB } from "../utils/api/shiftApi";

/**
 * –û–±—Ä–æ–±–ª—è—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∑–º—ñ–Ω–∏.
 *
 * @param {Object} form - –û–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–ø–∏—Å.
 * @param {string} currentShift - –ü–æ—Ç–æ—á–Ω–∞ –∑–º—ñ–Ω–∞ (first, second, third).
 * @param {string} selectedDate - –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞.
 * @param {string} selectedLeader - –û–±—Ä–∞–Ω–∏–π –ª—ñ–¥–µ—Ä.
 * @param {string} selectedMachine - –û–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞.
 * @param {string} selectedOperator - –û–±—Ä–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä.
 * @param {Function} setForm - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
 * @param {number|null} editingIndex - –Ü–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.
 * @param {string|null} editingEntryId - ID —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @param {Function} onSuccess - –ö–æ–ª–±–µ–∫ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
 */

export async function handleSaveEntryToDB({
  form,
  currentShift,
  selectedDate,
  selectedLeader,
  selectedMachine,
  selectedOperator,
  setForm,
  editingIndex,
  editingEntryId,
  token,
  onSuccess,
}) {
  // ‚è±Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ Luxon –∑ UTC-–∑–æ–Ω–æ—é
  const start = DateTime.fromISO(`${selectedDate}T${form.startTime}`, {
    zone: "utc",
  });
  const end = DateTime.fromISO(`${selectedDate}T${form.endTime}`, {
    zone: "utc",
  });

  // üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∑–º—ñ–Ω–∏
  if (
    (currentShift === "first" &&
      !isValidFirstShiftTime(start.toISO(), end.toISO())) ||
    (currentShift === "second" &&
      !isValidSecondShiftTime(start.toISO(), end.toISO())) ||
    (currentShift === "third" &&
      !isValidThirdShiftTime(start.toISO(), end.toISO()))
  ) {
    console.error("‚õî Invalid time for shift!");
    return;
  }

  // üßÆ –û–±—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É —Ç–∞ –ø—Ä–æ—Å—Ç–æ—é
  const { workingTime, initialDowntime, shift } = calculateWorkTime(start, end);

  // üìù –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å—É
  const entryData = {
    shift,
    machine: selectedMachine,
    date: selectedDate,
    displayDate: selectedDate,
    startTime: start.toISO(),
    endTime: end.toISO(),
    workingTime,
    downtime: initialDowntime,
    initialDowntime,
    leader: selectedLeader,
    operator: selectedOperator,
    task: form.task === "Zlecenie" ? form.customTaskName : form.task,
    product: form.product,
    color: form.color,
    reason: form.reason,
    quantity: parseInt(form.quantity, 10),
  };

  try {
    if (editingIndex !== null && editingEntryId) {
      const response = await updateEntryInDB(editingEntryId, entryData, token);
      console.log("‚úÖ Updated entry:", response.data);
    } else {
      const response = await saveEntryToDB(entryData, token);
      console.log("‚úÖ Added entry:", response.data);
    }

    // üßº –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    setForm({
      startTime: "",
      endTime: "",
      task: "",
      customTaskName: "",
      product: "",
      color: "",
      reason: "",
      quantity: 0,
    });

    if (onSuccess) onSuccess();
  } catch (err) {
    console.error("‚ùå Error saving entry:", err.response?.data || err.message);
  }
}
