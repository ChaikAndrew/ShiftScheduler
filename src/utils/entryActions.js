import { DateTime } from "luxon";
import { recalculateDowntime } from "./recalculateDowntime";

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥–∞—Ç–∞ –∑–∞–ø–∏—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–±—Ä–∞–Ω—ñ–π –¥–∞—Ç—ñ.
 * @param {string} entryDate - –î–∞—Ç–∞ –∑–∞–ø–∏—Å—É.
 * @param {string} selectedDate - –í–∏–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞.
 * @returns {boolean} - true, —è–∫—â–æ –¥–∞—Ç–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.
 */
const isDateMatching = (entryDate, selectedDate) => {
  const entry = DateTime.fromISO(entryDate).toISODate();
  const selected = DateTime.fromISO(selectedDate).toISODate();
  return entry === selected;
};

/**
 * –û–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É, —Å–∫–∏–¥–∞—é—á–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä–∞, –º–∞—à–∏–Ω—É —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
 */
export function handleShiftChange(
  shift,
  setCurrentShift,
  setSelectedLeader,
  setSelectedMachine,
  setSelectedOperator
) {
  setCurrentShift(shift);
  setSelectedLeader("");
  setSelectedMachine("");
  setSelectedOperator("");
}

/**
 * –û–Ω–æ–≤–ª—é—î –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É, —Å–∫–∏–¥–∞—é—á–∏ –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É, –ª—ñ–¥–µ—Ä–∞, –º–∞—à–∏–Ω—É —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
 */
export function handleDateChange(
  date,
  setSelectedDate,
  setCurrentShift,
  setSelectedLeader,
  setSelectedMachine,
  setSelectedOperator
) {
  setSelectedDate(date);
  setCurrentShift("");
  setSelectedLeader("");
  setSelectedMachine("");
  setSelectedOperator("");
}

/**
 * –Ü–Ω—ñ—Ü—ñ—é—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É.
 */

export function handleEditEntry(
  filteredIndex,
  entries,
  currentShift,
  selectedMachine,
  setForm,
  setEditingIndex,
  setError,
  selectedDate
) {
  console.group("‚úèÔ∏è handleEditEntry Process");
  console.log("Filtered Index:", filteredIndex);
  console.log("Current Shift:", currentShift);
  console.log("Selected Machine:", selectedMachine);
  console.log("Selected Date:", selectedDate);

  const shiftMachineEntries = entries[currentShift]?.[selectedMachine] || [];
  const filteredEntries = shiftMachineEntries.filter((entry) =>
    isDateMatching(entry.date, selectedDate)
  );

  console.log("Filtered Entries for Date:", filteredEntries);

  const entry = filteredEntries[filteredIndex];
  const originalIndex = shiftMachineEntries.findIndex((e) => e === entry);

  if (!entry) {
    console.error("‚ùå Entry not found for the selected date.");
    setError("Entry not found for the selected date.");
    console.groupEnd();
    return;
  }

  console.log("Original Index:", originalIndex);

  setForm({
    startTime: DateTime.fromISO(entry.startTime).toFormat("HH:mm"),
    endTime: DateTime.fromISO(entry.endTime).toFormat("HH:mm"),
    task: entry.task === entry.customTaskName ? "Zlecenie" : entry.task,
    customTaskName: entry.task === entry.customTaskName ? entry.task : "",
    product: entry.product,
    color: entry.color,
    reason: entry.reason,
    quantity: entry.quantity,
  });

  setEditingIndex(originalIndex);
  setError("");
  console.log("Editing entry:", entry);
  console.groupEnd();
}
/**
 * –í–∏–¥–∞–ª—è—î –∑–∞–ø–∏—Å —ñ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î –ø—Ä–æ—Å—Ç—ñ–π.
 */
export function handleDeleteEntry(
  filteredIndex,
  entries,
  currentShift,
  selectedMachine,
  setEntries,
  selectedDate
) {
  console.group("üóëÔ∏è handleDeleteEntry Process");
  console.log("Filtered Index:", filteredIndex);
  console.log("Current Shift:", currentShift);
  console.log("Selected Machine:", selectedMachine);
  console.log("Selected Date:", selectedDate);

  const updatedEntries = { ...entries };
  const machineEntries = updatedEntries[currentShift]?.[selectedMachine] || [];

  const filteredEntries = machineEntries.filter((entry) =>
    isDateMatching(entry.date, selectedDate)
  );
  console.log("Filtered Entries for Date:", filteredEntries);

  const entry = filteredEntries[filteredIndex];
  const entryIndex = machineEntries.findIndex((e) => e === entry);

  if (entryIndex !== -1) {
    const entryToDelete = machineEntries[entryIndex];
    console.log("Deleting Entry:", entryToDelete);

    updatedEntries[currentShift][selectedMachine] = machineEntries.filter(
      (e) => e !== entryToDelete
    );

    const recalculatedEntries = recalculateDowntime(
      updatedEntries,
      currentShift,
      selectedMachine
    );

    console.log(
      "Recalculated Entries with updated downtime:",
      JSON.stringify(recalculatedEntries, null, 2)
    );

    setEntries(recalculatedEntries);
  } else {
    console.error("‚ùå Invalid index for deletion.");
  }
  console.groupEnd();
}
