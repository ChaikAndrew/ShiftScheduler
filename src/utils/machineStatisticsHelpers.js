/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–∂–Ω—ñ–π –º–∞—à–∏–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–∏.
 *
 * @param {Object} entries - –û–±'—î–∫—Ç –∑ —É—Å—ñ–º–∞ –∑–∞–ø–∏—Å–∞–º–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –∑–º—ñ–Ω–∞–º–∏.
 * @param {string[]} machines - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–∞—à–∏–Ω.
 * @param {string} selectedDate - –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'YYYY-MM-DD'.
 * @param {string} selectedShift - –ù–∞–∑–≤–∞ –æ–±—Ä–∞–Ω–æ—ó –∑–º—ñ–Ω–∏ (first, second, third).
 * @returns {Array<Object>} –ú–∞—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–∂–Ω—ñ–π –º–∞—à–∏–Ω—ñ, –¥–µ —î –¥–∞–Ω—ñ.
 *
 * –ö–æ–∂–µ–Ω –æ–±'—î–∫—Ç —É –º–∞—Å–∏–≤—ñ –º—ñ—Å—Ç–∏—Ç—å:
 * - machine: –Ω–∞–∑–≤–∞ –º–∞—à–∏–Ω–∏
 * - totalQuantity: –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
 * - workingTime: –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å
 * - downtime: –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é
 * - downtimeReasons: –æ–±'—î–∫—Ç –∑ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ—é —Ç–∞ —ó—Ö —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
 * - POD, POF, Zlecenie, Test: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω—å
 * - products: { [productName]: summedQuantity }
 */
export const getMachineStatistics = (
  entries,
  machines,
  selectedDate,
  selectedShift
) => {
  if (!selectedDate || !selectedShift || !machines?.length) return [];

  // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∑–º—ñ–Ω–∏
  const shiftEntries = entries?.[selectedShift] || {};

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—à–∏–Ω
  if (!Object.keys(shiftEntries).length) return []; // –Ø–∫—â–æ –Ω–µ–º–∞ –∑–∞–ø–∏—Å—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤

  const statistics = machines.map((machine) => {
    const machineEntries =
      shiftEntries[machine]?.filter(
        (entry) => entry.displayDate === selectedDate // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É
      ) || [];

    // –Ø–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –º–∞—à–∏–Ω–∏ –Ω–µ–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    if (!machineEntries.length) return null;

    const taskSummary = { POD: 0, POF: 0, Zlecenie: 0, Test: 0 };
    let totalQuantity = 0;
    let workingTime = 0;
    let downtime = 0;
    const downtimeReasons = {};
    const products = {}; // üëà –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É)

    machineEntries.forEach((entry) => {
      const task = entry.task;
      const quantity = parseInt(entry.quantity, 10) || 0;
      const entryWorkingTime = parseInt(entry.workingTime, 10) || 0;
      const entryDowntime = parseInt(entry.downtime, 10) || 0;
      const reasonDescription = entry.reason || "Unknown";

      // üëá –∑–±—ñ—Ä –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
      const prod = (entry.product ?? "").toString().trim();
      if (prod) products[prod] = (products[prod] || 0) + quantity;

      if (task in taskSummary) {
        taskSummary[task] += quantity;
      }

      totalQuantity += quantity;
      workingTime += entryWorkingTime;
      downtime += entryDowntime;

      if (entryDowntime > 0) {
        downtimeReasons[reasonDescription] =
          (downtimeReasons[reasonDescription] || 0) + entryDowntime;
      }
      console.log("üìä MACHINE ENTRIES:", machineEntries);
      console.log("‚è±Ô∏è TOTAL downtime:", downtime);
      console.log("üìã REASONS:", downtimeReasons);
    });

    return {
      machine,
      totalQuantity,
      workingTime,
      downtime,
      downtimeReasons,
      products, // üëà –¥–æ–¥–∞–Ω–æ
      ...taskSummary,
    };
  });

  // –í–∏–¥–∞–ª—è—î–º–æ –º–∞—à–∏–Ω–∏ –±–µ–∑ –¥–∞–Ω–∏—Ö
  return statistics.filter(
    (stat) => stat !== null && (stat.totalQuantity > 0 || stat.downtime > 0)
  );
};
